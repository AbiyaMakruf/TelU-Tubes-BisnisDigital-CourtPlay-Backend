name: Build, Push, and Deploy to Cloud Run

on:
  push:
    branches: [ main, development-pubsub-push ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Setup Google Cloud ---
      - name: Create GCP credentials file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > $HOME/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json" >> $GITHUB_ENV

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # --- Konfigurasi Docker Buildx untuk Caching ---

      # 1. Setup QEMU (disarankan untuk Buildx)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      # 2. Setup Buildx (Wajib untuk Caching)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Konfigurasi Docker untuk Artifact Registry (sebelum login)
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          
      # Variabel untuk tag image
      - name: Set image tag
        id: image
        run: echo "TAG=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/courtplay-repo/courtplay-api:latest" >> $GITHUB_OUTPUT

      # --- 4. Build dan Push dengan Caching (Menggantikan 2 langkah lama) ---
      - name: Build and push Docker image with GHA Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.image.outputs.TAG }}
          # Konfigurasi Caching Utama
          # type=gha (GitHub Actions) adalah cache tercepat untuk layer Docker
          cache-from: type=gha
          cache-to: type=gha,mode=max # mode=max menyimpan semua layer, bahkan yang tidak terpakai

      # --- Deploy ke Cloud Run ---
      
      - name: Create .env.production file
        run: |
          echo "${{ secrets.ENV_PRODUCTION_FILE }}" > .env.production

      - name: Deploy to Cloud Run (GPU)
        run: |
          ENV_VARS=$(grep -v '^#' .env.production | grep '=' | sed '/^$/d' | tr '\n' ',' | sed 's/,$//')
          gcloud run deploy courtplay-api-gpu \
            --image=${{ steps.image.outputs.TAG }} \
            --region=us-central1 \
            --platform=managed \
            --allow-unauthenticated \
            --service-account=github-runner-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --port=8080 \
            --cpu=8 \
            --memory=16Gi \
            --gpu=1 --gpu-type=nvidia-l4 \
            --cpu-boost \
            --async \
            --set-env-vars="$ENV_VARS"

      - name: Route Traffic to Latest Revision
        run: |
          gcloud run services update-traffic courtplay-api-gpu \
            --to-latest \
            --region=us-central1